<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2025-07-29T22:47:15+02:00</updated><id>/feed.xml</id><title type="html">Volovyk ENK</title><subtitle>Volovyk ENK provides consulting in Azure, .NET Core, Delphi, Dart &amp; Flutter, plus startup and mobile app development from Bergen, Norway.</subtitle><author><name>Dan Volovyk</name></author><entry><title type="html">Effortlessly Inject Dependencies into Azure Functions with Constructor Injection</title><link href="/blog/2022/07/16/effortlessly-di-azurefunction.md" rel="alternate" type="text/html" title="Effortlessly Inject Dependencies into Azure Functions with Constructor Injection" /><published>2022-07-16T00:00:00+02:00</published><updated>2022-07-16T00:00:00+02:00</updated><id>/blog/2022/07/16/effortlessly-di-azurefunction</id><content type="html" xml:base="/blog/2022/07/16/effortlessly-di-azurefunction.md"><![CDATA[<p>As Azure Functions developers, we often rely on external services and libraries to perform certain tasks within our functions. Instead of instantiating these dependencies within our function code, we can use constructor injection to make them available to our functions as needed.</p>

<p>Constructor injection is a design pattern that involves passing the dependencies of a class as arguments to its constructor. This allows the class to use these dependencies without having to instantiate them itself, which helps to reduce the complexity of the code and improve testability.</p>

<p>To use constructor injection in an Azure Function, we first need to register the dependencies in the FunctionsStartup class. This can be done by overriding the Configure method and using the IFunctionsHostBuilder parameter to register the dependencies as services.</p>

<p>Here’s an example of how we can register an HttpClient and a custom service as dependencies in an Azure Function:</p>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.Azure.Functions.Extensions.DependencyInjection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.DependencyInjection</span><span class="p">;</span>

<span class="p">[</span><span class="n">assembly</span><span class="p">:</span> <span class="nf">FunctionsStartup</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">MyNamespace</span><span class="p">.</span><span class="n">Startup</span><span class="p">))]</span>
<span class="k">namespace</span> <span class="nn">MyNamespace</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Startup</span> <span class="p">:</span> <span class="n">FunctionsStartup</span>
    <span class="p">{</span>
        <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">IFunctionsHostBuilder</span> <span class="n">builder</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c1">// Register HttpClient as a singleton service</span>
            <span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddSingleton</span><span class="p">&lt;</span><span class="n">HttpClient</span><span class="p">&gt;();</span>

            <span class="c1">// Register custom service as a singleton service</span>
            <span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddSingleton</span><span class="p">&lt;</span><span class="n">IMyService</span><span class="p">,</span> <span class="n">MyService</span><span class="p">&gt;();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Once you have registered your dependencies in the Startup class, you can use constructor injection to make them available in your functions. To use constructor injection in a function, you simply need to add a constructor to your function class and specify the dependencies that you want to inject. Here is an example of how to use constructor injection in the MyHttpTrigger function:</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Http</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.AspNetCore.Mvc</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Azure.WebJobs</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Azure.WebJobs.Extensions.Http</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.Extensions.Logging</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Net.Http</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading.Tasks</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">MyNamespace</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">MyHttpTrigger</span>
    <span class="p">{</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">HttpClient</span> <span class="n">_client</span><span class="p">;</span>
        <span class="k">private</span> <span class="k">readonly</span> <span class="n">IMyService</span> <span class="n">_service</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">MyHttpTrigger</span><span class="p">(</span><span class="n">IHttpClientFactory</span> <span class="n">httpClientFactory</span><span class="p">,</span> <span class="n">IMyService</span> <span class="n">service</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="n">_client</span> <span class="p">=</span> <span class="n">httpClientFactory</span><span class="p">.</span><span class="nf">CreateClient</span><span class="p">();</span>
            <span class="k">this</span><span class="p">.</span><span class="n">_service</span> <span class="p">=</span> <span class="n">service</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="p">[</span><span class="nf">FunctionName</span><span class="p">(</span><span class="s">"MyHttpTrigger"</span><span class="p">)]</span>
        <span class="k">public</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">Run</span><span class="p">(</span>
            <span class="p">[</span><span class="nf">HttpTrigger</span><span class="p">(</span><span class="n">AuthorizationLevel</span><span class="p">.</span><span class="n">Function</span><span class="p">,</span> <span class="s">"get"</span><span class="p">,</span> <span class="s">"post"</span><span class="p">,</span> <span class="n">Route</span> <span class="p">=</span> <span class="k">null</span><span class="p">)]</span> <span class="n">HttpRequest</span> <span class="n">req</span><span class="p">,</span>
            <span class="n">ILogger</span> <span class="n">log</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">response</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_client</span><span class="p">.</span><span class="nf">GetAsync</span><span class="p">(</span><span class="s">"https://microsoft.com"</span><span class="p">);</span>
            <span class="kt">var</span> <span class="n">message</span> <span class="p">=</span> <span class="n">_service</span><span class="p">.</span><span class="nf">GetMessage</span><span class="p">();</span>

            <span class="k">return</span> <span class="k">new</span> <span class="nf">OkObjectResult</span><span class="p">(</span><span class="s">"Response from function with injected dependencies."</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>Dependency injection is a useful design pattern that can help you make your Azure Functions more modular and easier to maintain. By injecting your dependencies through the constructor, you can easily swap out different implementations without having to make changes to your function code. This can be particularly useful when testing or deploying your functions to different environments. In addition, using dependency injection can help you adhere to the single responsibility principle by separating the concerns of your functions and making it clear what each class is responsible for. With the right approach, dependency injection can be a powerful tool for improving the design and reliability of your Azure Functions.</p>]]></content><author><name>Dan Volovyk</name></author><category term="Blog" /><category term="BestPractice" /><category term="AzureFunction" /><summary type="html"><![CDATA[As Azure Functions developers, we often rely on external services and libraries to perform certain tasks within our functions. Instead of instantiating these dependencies within our function code, we can use constructor injection to make them available to our functions as needed.]]></summary></entry><entry><title type="html">How to use User Secrets and JSON file configuration in an Azure Functions app</title><link href="/blog/2022/07/09/usersecrets-azurefunction.md" rel="alternate" type="text/html" title="How to use User Secrets and JSON file configuration in an Azure Functions app" /><published>2022-07-09T00:00:00+02:00</published><updated>2022-07-09T00:00:00+02:00</updated><id>/blog/2022/07/09/usersecrets-azurefunction</id><content type="html" xml:base="/blog/2022/07/09/usersecrets-azurefunction.md"><![CDATA[<p>To use User Secrets in an Azure Functions app, you need to first install the Microsoft.Extensions.Configuration.UserSecrets package from NuGet. This will also add a GUID to your project file. Once this is done, you can use User Secrets as you normally would through Visual Studio or the .NET CLI.</p>

<p>Note that the code sample below includes a call to the AddUserSecrets method. If you do not plan to use User Secrets, you can skip this step and remove the call to the AddUserSecrets method.</p>

<p>To use a JSON file for configuration, you can create the JSON file and then use the following code sample to read from it:</p>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">My.Project</span><span class="p">;</span>

<span class="c1">// register assembly</span>
<span class="p">[</span><span class="n">assembly</span><span class="p">:</span> <span class="nf">FunctionsStartup</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">Startup</span><span class="p">))]</span>
<span class="k">namespace</span> <span class="nn">My.Project</span>
<span class="p">{</span>
    <span class="c1">// inherit FunctionsStartup</span>
    <span class="k">public</span> <span class="k">class</span> <span class="nc">Startup</span> <span class="p">:</span> <span class="n">FunctionsStartup</span>
    <span class="p">{</span>
        <span class="c1">// override configure method</span>
        <span class="k">public</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Configure</span><span class="p">(</span><span class="n">IFunctionsHostBuilder</span> <span class="n">builder</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">var</span> <span class="n">config</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ConfigurationBuilder</span><span class="p">()</span>
               <span class="p">.</span><span class="nf">SetBasePath</span><span class="p">(</span><span class="n">Environment</span><span class="p">.</span><span class="n">CurrentDirectory</span><span class="p">)</span>
               <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">"appsettings.json"</span><span class="p">,</span> <span class="k">false</span><span class="p">)</span>
               <span class="p">.</span><span class="nf">AddUserSecrets</span><span class="p">(</span><span class="n">Assembly</span><span class="p">.</span><span class="nf">GetExecutingAssembly</span><span class="p">(),</span> <span class="k">false</span><span class="p">)</span>
               <span class="p">.</span><span class="nf">AddEnvironmentVariables</span><span class="p">()</span>
               <span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

            <span class="n">builder</span><span class="p">.</span><span class="n">Services</span><span class="p">.</span><span class="n">AddSingleton</span><span class="p">&lt;</span><span class="n">IConfiguration</span><span class="p">&gt;(</span><span class="n">config</span><span class="p">);</span>
            
            <span class="c1">// register your other services</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This code creates a new ConfigurationBuilder and sets the base path to the current directory. It then adds the JSON file, User Secrets, and environment variables to the configuration. The resulting configuration is then used to register the IConfiguration service in the DI container.
To access the IConfiguration service in an Azure Functions app, you can use dependency injection (DI). Here’s an example of how you can do this in an Azure Functions app that uses the Startup class:</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">MyFunction</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">FunctionName</span><span class="p">(</span><span class="s">"MyFunction"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Run</span><span class="p">(</span>
        <span class="p">[</span><span class="nf">HttpTrigger</span><span class="p">(</span><span class="n">AuthorizationLevel</span><span class="p">.</span><span class="n">Function</span><span class="p">,</span> <span class="s">"get"</span><span class="p">,</span> <span class="s">"post"</span><span class="p">,</span> <span class="n">Route</span> <span class="p">=</span> <span class="k">null</span><span class="p">)]</span> <span class="n">HttpRequest</span> <span class="n">req</span><span class="p">,</span>
        <span class="n">ILogger</span> <span class="n">log</span><span class="p">,</span>
        <span class="p">[</span><span class="n">Inject</span><span class="p">]</span> <span class="n">IConfiguration</span> <span class="n">config</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// Use the config object to access User Secrets or JSON file configuration values</span>
        <span class="kt">var</span> <span class="n">mySecret</span> <span class="p">=</span> <span class="n">config</span><span class="p">[</span><span class="s">"MySecret"</span><span class="p">];</span>
        <span class="n">log</span><span class="p">.</span><span class="nf">LogInformation</span><span class="p">(</span><span class="s">$"My secret value is: </span><span class="p">{</span><span class="n">mySecret</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>In this example, the IConfiguration service is injected into the MyFunction Azure Functions using the [Inject] attribute. You can then use the config object to access the User Secrets or JSON file configuration values.</p>

<p>I hope this helps clarify how to access the IConfiguration service in an Azure Functions app.</p>]]></content><author><name>Dan Volovyk</name></author><category term="Blog" /><category term="BestPractice" /><category term="AzureFunction" /><category term="UserSecrets" /><summary type="html"><![CDATA[To use User Secrets in an Azure Functions app, you need to first install the Microsoft.Extensions.Configuration.UserSecrets package from NuGet. This will also add a GUID to your project file. Once this is done, you can use User Secrets as you normally would through Visual Studio or the .NET CLI.]]></summary></entry><entry><title type="html">How to disable an Azure Function while debugging locally</title><link href="/blog/2022/07/02/disable-azurefunction-locally-debug.md" rel="alternate" type="text/html" title="How to disable an Azure Function while debugging locally" /><published>2022-07-02T00:00:00+02:00</published><updated>2022-07-02T00:00:00+02:00</updated><id>/blog/2022/07/02/disable-azurefunction-locally-debug</id><content type="html" xml:base="/blog/2022/07/02/disable-azurefunction-locally-debug.md"><![CDATA[<p>To disable an Azure Function while debugging locally, you can follow these steps:</p>

<p>Open the local.settings.json file in the root of your Azure Functions project.</p>

<p>Locate the “IsEncrypted” setting and set it to “false”.</p>

<p>Locate the “Values” setting and add a new key-value pair for each function you want to disable, using the name of the function as the key and “false” as the value.</p>

<p>Here is an example of what the local.settings.json file might look like with two functions disabled:</p>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span>
  <span class="s">"IsEncrypted"</span><span class="p">:</span> <span class="k">false</span><span class="p">,</span>
  <span class="s">"Values"</span><span class="p">:</span> <span class="p">{</span>
    <span class="s">"AzureWebJobsStorage"</span><span class="p">:</span> <span class="s">"..."</span><span class="p">,</span>
    <span class="s">"FUNCTIONS_WORKER_RUNTIME"</span><span class="p">:</span> <span class="s">"dotnet"</span><span class="p">,</span>
    <span class="s">"Function1"</span><span class="p">:</span> <span class="s">"false"</span><span class="p">,</span>
    <span class="s">"Function2"</span><span class="p">:</span> <span class="s">"false"</span><span class="p">,</span>
    <span class="s">"Function3"</span><span class="p">:</span> <span class="s">"true"</span>
    <span class="s">"Function2"</span><span class="p">:</span> <span class="s">"true"</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>With this configuration, the functions named “Function1” and “Function2” will be disabled while debugging locally. All other functions will remain enabled.</p>

<p>Note that this method only works for debugging locally, and will not affect the deployment of your Azure Functions to the cloud. To disable functions in the cloud, you can use the Azure portal or the Azure Functions CLI to disable or enable individual functions.</p>]]></content><author><name>Dan Volovyk</name></author><category term="Blog" /><category term="BestPractice" /><category term="AzureFunction" /><summary type="html"><![CDATA[To disable an Azure Function while debugging locally, you can follow these steps:]]></summary></entry><entry><title type="html">Avoiding Common Pitfalls: A Guide to Writing Reliable Azure Functions</title><link href="/blog/2022/06/25/guid-to-writing-reliable-azurefunction.md" rel="alternate" type="text/html" title="Avoiding Common Pitfalls: A Guide to Writing Reliable Azure Functions" /><published>2022-06-25T00:00:00+02:00</published><updated>2022-06-25T00:00:00+02:00</updated><id>/blog/2022/06/25/guid-to-writing-reliable-azurefunction</id><content type="html" xml:base="/blog/2022/06/25/guid-to-writing-reliable-azurefunction.md"><![CDATA[<p>As an Azure Functions developer, it is important to follow best practices and avoid common pitfalls that can cause problems in your applications. In this article, we will discuss some things that you should never do when developing Azure Functions, in order to ensure that your functions are reliable, efficient, and easy to maintain.</p>

<p>Don’t use global variables: Azure Functions are designed to be stateless, meaning that each function execution is independent and does not retain any state from previous executions. Using global variables can lead to unexpected behavior and make it difficult to understand the logic of your functions. Instead, use input and output bindings to pass data between function executions.</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Bad</span>
<span class="k">public</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">Counter</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>

<span class="p">[</span><span class="nf">FunctionName</span><span class="p">(</span><span class="s">"MyFunction"</span><span class="p">)]</span>
<span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Run</span><span class="p">(</span>
    <span class="p">[</span><span class="nf">QueueTrigger</span><span class="p">(</span><span class="s">"myqueue"</span><span class="p">)]</span> <span class="kt">string</span> <span class="n">message</span><span class="p">,</span>
    <span class="n">ILogger</span> <span class="n">log</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Counter</span><span class="p">++;</span>
    <span class="n">log</span><span class="p">.</span><span class="nf">LogInformation</span><span class="p">(</span><span class="s">$"Counter: </span><span class="p">{</span><span class="n">Counter</span><span class="p">}</span><span class="s">"</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Good</span>
<span class="p">[</span><span class="nf">FunctionName</span><span class="p">(</span><span class="s">"MyFunction"</span><span class="p">)]</span>
<span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Run</span><span class="p">(</span>
    <span class="p">[</span><span class="nf">QueueTrigger</span><span class="p">(</span><span class="s">"myqueue"</span><span class="p">)]</span> <span class="kt">string</span> <span class="n">message</span><span class="p">,</span>
    <span class="p">[</span><span class="nf">Table</span><span class="p">(</span><span class="s">"mytable"</span><span class="p">)]</span> <span class="k">out</span> <span class="n">TableEntity</span> <span class="n">entity</span><span class="p">,</span>
    <span class="n">ILogger</span> <span class="n">log</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">entity</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TableEntity</span>
    <span class="p">{</span>
        <span class="n">PartitionKey</span> <span class="p">=</span> <span class="s">"partition1"</span><span class="p">,</span>
        <span class="n">RowKey</span> <span class="p">=</span> <span class="n">Guid</span><span class="p">.</span><span class="nf">NewGuid</span><span class="p">().</span><span class="nf">ToString</span><span class="p">(),</span>
        <span class="n">Counter</span> <span class="p">=</span> <span class="m">1</span>
    <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Don’t use blocking calls: Azure Functions are designed to be highly scalable and should be able to handle a large number of concurrent requests. If your functions make blocking calls, such as waiting for a response from a slow API or reading from a file, it can slow down the overall performance of your application and prevent other requests from being processed. Use asynchronous programming patterns to avoid blocking calls and ensure that your functions can handle a high volume of requests.</p>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Bad</span>
<span class="p">[</span><span class="nf">FunctionName</span><span class="p">(</span><span class="s">"MyFunction"</span><span class="p">)]</span>
<span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Run</span><span class="p">(</span>
    <span class="p">[</span><span class="nf">QueueTrigger</span><span class="p">(</span><span class="s">"myqueue"</span><span class="p">)]</span> <span class="kt">string</span> <span class="n">message</span><span class="p">,</span>
    <span class="n">ILogger</span> <span class="n">log</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// This call blocks the function execution until the response is received</span>
    <span class="kt">var</span> <span class="n">response</span> <span class="p">=</span> <span class="n">HttpClient</span><span class="p">.</span><span class="nf">GetStringAsync</span><span class="p">(</span><span class="s">"https://slowapi.com/api/endpoint"</span><span class="p">).</span><span class="n">Result</span><span class="p">;</span>
    <span class="n">log</span><span class="p">.</span><span class="nf">LogInformation</span><span class="p">(</span><span class="n">response</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Good </span>
<span class="p">[</span><span class="nf">FunctionName</span><span class="p">(</span><span class="s">"MyFunction"</span><span class="p">)]</span>
<span class="k">public</span> <span class="k">static</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">Run</span><span class="p">(</span>
    <span class="p">[</span><span class="nf">QueueTrigger</span><span class="p">(</span><span class="s">"myqueue"</span><span class="p">)]</span> <span class="kt">string</span> <span class="n">message</span><span class="p">,</span>
    <span class="n">ILogger</span> <span class="n">log</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c1">// This call does not block the function execution and allows the function to handle other requests concurrently</span>
    <span class="kt">var</span> <span class="n">response</span> <span class="p">=</span> <span class="k">await</span> <span class="n">HttpClient</span><span class="p">.</span><span class="nf">GetStringAsync</span><span class="p">(</span><span class="s">"https://slowapi.com/api/endpoint"</span><span class="p">);</span>
    <span class="n">log</span><span class="p">.</span><span class="nf">LogInformation</span><span class="p">(</span><span class="n">response</span><span class="p">);</span>
<span class="p">}</span>

</code></pre></div></div>
<p>Don’t hardcode sensitive information: It is a security best practice to avoid hardcoding sensitive information, such as passwords and API keys, in your code. Instead, use Azure Key Vault or other secrets management solutions to securely store and retrieve sensitive information at runtime.</p>

<p>Don’t use large dependencies: Azure Functions are designed to be lightweight and efficient, so it is generally not a good idea to include large dependencies in your functions. This can increase the size of your deployment package and slow down the execution of your functions. Instead, consider using smaller libraries or writing custom code to achieve the same functionality.</p>

<p>Timeouts:  It’s important to keep in mind the potential for timeout issues caused by large, long-running functions. To avoid these issues, consider breaking up your functions into smaller, more focused sets that can work together and return responses quickly. This is especially important for webhooks and HTTP trigger functions, which often require an immediate response.</p>

<p>One way to achieve this is by using storage queues for cross-function communication. These queues are a cost-effective and easy-to-use solution for passing messages between functions. It’s worth noting, however, that individual messages in a storage queue are limited to 64 KB in size. If you need to pass larger messages, you may want to consider using an Azure Service Bus queue or Event Hub.</p>

<p>Another option to consider is using Durable Functions or Azure Logic Apps to manage state transitions and communication between multiple functions. This can be particularly useful if you need to coordinate the execution of multiple functions or need to maintain state across function invocations.</p>

<p>Ultimately, the key to avoiding timeout issues is to keep your functions focused and efficient, and to carefully consider the best approach for managing communication and coordination between them.</p>

<p>By following these best practices and avoiding common pitfalls, you can ensure that your Azure Functions are reliable, efficient, and easy to maintain.</p>]]></content><author><name>Dan Volovyk</name></author><category term="Blog" /><category term="BestPractice" /><category term="AzureFunction" /><summary type="html"><![CDATA[As an Azure Functions developer, it is important to follow best practices and avoid common pitfalls that can cause problems in your applications. In this article, we will discuss some things that you should never do when developing Azure Functions, in order to ensure that your functions are reliable, efficient, and easy to maintain.]]></summary></entry><entry><title type="html">The Importance of the KISS Principle in Azure Function Development</title><link href="/blog/2022/06/18/kiss-principle-azurefunction.md" rel="alternate" type="text/html" title="The Importance of the KISS Principle in Azure Function Development" /><published>2022-06-18T00:00:00+02:00</published><updated>2022-06-18T00:00:00+02:00</updated><id>/blog/2022/06/18/kiss-principle-azurefunction</id><content type="html" xml:base="/blog/2022/06/18/kiss-principle-azurefunction.md"><![CDATA[<p>When it comes to developing an Azure Function project, it can be tempting to get caught up in adding as many features and functions as possible. However, it is important to remember the KISS (Keep It Simple, Stupid) principle, which states that simplicity is key when it comes to creating effective and maintainable software.</p>

<p>One way to apply the KISS principle to your Azure Function project is to focus on writing clean, concise code that is easy to read and understand. This can be achieved by adhering to best practices such as using clear and descriptive names for variables and functions, and using comments to explain the purpose of your code.</p>

<p>Another way to keep things simple is to avoid over-engineering your Azure Function project. This might mean avoiding the use of unnecessary dependencies or abstaining from adding features that are not absolutely necessary for the project’s goals.</p>

<p>Here is an example of an Azure Function written using the KISS principle:</p>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">SimpleFunction</span>
<span class="p">{</span>
    <span class="p">[</span><span class="nf">FunctionName</span><span class="p">(</span><span class="s">"SimpleFunction"</span><span class="p">)]</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">IActionResult</span><span class="p">&gt;</span> <span class="nf">Run</span><span class="p">(</span>
        <span class="p">[</span><span class="nf">HttpTrigger</span><span class="p">(</span><span class="n">AuthorizationLevel</span><span class="p">.</span><span class="n">Anonymous</span><span class="p">,</span> <span class="s">"get"</span><span class="p">,</span> <span class="s">"post"</span><span class="p">,</span> <span class="n">Route</span> <span class="p">=</span> <span class="k">null</span><span class="p">)]</span> <span class="n">HttpRequest</span> <span class="n">req</span><span class="p">,</span>
        <span class="n">ILogger</span> <span class="n">log</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">log</span><span class="p">.</span><span class="nf">LogInformation</span><span class="p">(</span><span class="s">"C# HTTP trigger function processed a request."</span><span class="p">);</span>

        <span class="kt">string</span> <span class="n">name</span> <span class="p">=</span> <span class="n">req</span><span class="p">.</span><span class="n">Query</span><span class="p">[</span><span class="s">"name"</span><span class="p">];</span>

        <span class="kt">string</span> <span class="n">requestBody</span> <span class="p">=</span> <span class="k">await</span> <span class="k">new</span> <span class="nf">StreamReader</span><span class="p">(</span><span class="n">req</span><span class="p">.</span><span class="n">Body</span><span class="p">).</span><span class="nf">ReadToEndAsync</span><span class="p">();</span>
        <span class="kt">dynamic</span> <span class="n">data</span> <span class="p">=</span> <span class="n">JsonConvert</span><span class="p">.</span><span class="nf">DeserializeObject</span><span class="p">(</span><span class="n">requestBody</span><span class="p">);</span>
        <span class="n">name</span> <span class="p">=</span> <span class="n">name</span> <span class="p">??</span> <span class="n">data</span><span class="p">?.</span><span class="n">name</span><span class="p">;</span>

        <span class="k">return</span> <span class="n">name</span> <span class="p">!=</span> <span class="k">null</span>
            <span class="p">?</span> <span class="p">(</span><span class="n">ActionResult</span><span class="p">)</span><span class="k">new</span> <span class="nf">OkObjectResult</span><span class="p">(</span><span class="s">$"Hello, </span><span class="p">{</span><span class="n">name</span><span class="p">}</span><span class="s">"</span><span class="p">)</span>
            <span class="p">:</span> <span class="k">new</span> <span class="nf">BadRequestObjectResult</span><span class="p">(</span><span class="s">"Please pass a name on the query string or in the request body"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>In this example, the code is easy to read and understand, with clear and descriptive names for variables and functions. The function itself is simple and does not include any unnecessary dependencies or features.</p>

<p>Applying the KISS principle to your Azure Function project is not only important for maintaining clean and concise code, but it is also essential for writing effective tests. By keeping your code simple and focused, it is easier to write tests that thoroughly cover all of the necessary functionality without becoming overly complex.</p>

<p>Here is an example of a test for the Azure Function code provided in the previous example:</p>

<div class="language-cs highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">TestMethod</span><span class="p">]</span>
<span class="k">public</span> <span class="k">async</span> <span class="n">Task</span> <span class="nf">SimpleFunction_ReturnsExpectedResult</span><span class="p">()</span>
<span class="p">{</span>
    <span class="c1">// Arrange</span>
    <span class="kt">var</span> <span class="n">request</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HttpRequestMessage</span><span class="p">();</span>
    <span class="n">request</span><span class="p">.</span><span class="n">Method</span> <span class="p">=</span> <span class="n">HttpMethod</span><span class="p">.</span><span class="n">Get</span><span class="p">;</span>
    <span class="n">request</span><span class="p">.</span><span class="n">RequestUri</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Uri</span><span class="p">(</span><span class="s">"http://localhost/api/SimpleFunction?name=TestName"</span><span class="p">);</span>

    <span class="kt">var</span> <span class="n">logger</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">TestLogger</span><span class="p">();</span>
    <span class="kt">var</span> <span class="n">response</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HttpResponseMessage</span><span class="p">();</span>

    <span class="c1">// Act</span>
    <span class="n">response</span> <span class="p">=</span> <span class="k">await</span> <span class="n">SimpleFunction</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="n">logger</span><span class="p">);</span>

    <span class="c1">// Assert</span>
    <span class="n">Assert</span><span class="p">.</span><span class="nf">IsTrue</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">IsSuccessStatusCode</span><span class="p">);</span>
    <span class="n">Assert</span><span class="p">.</span><span class="nf">AreEqual</span><span class="p">(</span><span class="s">"Hello, TestName"</span><span class="p">,</span> <span class="k">await</span> <span class="n">response</span><span class="p">.</span><span class="n">Content</span><span class="p">.</span><span class="nf">ReadAsStringAsync</span><span class="p">());</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This test sends a GET request to the SimpleFunction endpoint with a query parameter name set to TestName. It then verifies that the response is a success status code and that the response content is the expected string “Hello, TestName”.</p>

<p>By writing clear and focused tests like this, you can ensure that your Azure Function is functioning as intended and that any changes you make to the code do not break its functionality. This is especially important when working with a team, as it ensures that everyone is on the same page and that there are no unexpected surprises when merging code.</p>

<p>In summary, applying the KISS principle to your Azure Function project and its accompanying tests is essential for creating maintainable and effective software. By keeping things simple and focused, you can save time and effort in the long run, and ensure that your project is of the highest quality.</p>]]></content><author><name>Dan Volovyk</name></author><category term="Blog" /><category term="KISS" /><category term="AzureFunction" /><summary type="html"><![CDATA[When it comes to developing an Azure Function project, it can be tempting to get caught up in adding as many features and functions as possible. However, it is important to remember the KISS (Keep It Simple, Stupid) principle, which states that simplicity is key when it comes to creating effective and maintainable software.]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="/blog/2019/04/18/welcome-to-jekyll.md" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2019-04-18T21:34:30+02:00</published><updated>2019-04-18T21:34:30+02:00</updated><id>/blog/2019/04/18/welcome-to-jekyll</id><content type="html" xml:base="/blog/2019/04/18/welcome-to-jekyll.md"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>To add new posts, simply add a file in the <code class="language-plaintext highlighter-rouge">_posts</code> directory that follows the convention <code class="language-plaintext highlighter-rouge">YYYY-MM-DD-name-of-post.ext</code> and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span>
</code></pre></div></div>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name>Dan Volovyk</name></author><category term="blog" /><category term="Jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry><entry><title type="html">Post: Link</title><link href="/blog/2010/03/07/post-link.md" rel="alternate" type="text/html" title="Post: Link" /><published>2010-03-07T00:00:00+01:00</published><updated>2010-03-07T00:00:00+01:00</updated><id>/blog/2010/03/07/post-link</id><content type="html" xml:base="/blog/2010/03/07/post-link.md"><![CDATA[<p>This theme supports <strong>link posts</strong>, made famous by John Gruber. To use, just add <code class="language-plaintext highlighter-rouge">link: http://url-you-want-linked</code> to the post’s YAML front matter and you’re done.</p>

<blockquote>
  <p>And this is how a quote looks.</p>
</blockquote>

<p>Some <a href="#">link</a> can also be shown.</p>]]></content><author><name>Dan Volovyk</name></author><category term="Blog" /><category term="link" /><category term="Post Formats" /><summary type="html"><![CDATA[This theme supports link posts, made famous by John Gruber. To use, just add link: http://url-you-want-linked to the post’s YAML front matter and you’re done.]]></summary></entry><entry><title type="html">Post: Notice</title><link href="/blog/2010/02/05/post-notice.md" rel="alternate" type="text/html" title="Post: Notice" /><published>2010-02-05T00:00:00+01:00</published><updated>2010-02-05T00:00:00+01:00</updated><id>/blog/2010/02/05/post-notice</id><content type="html" xml:base="/blog/2010/02/05/post-notice.md"><![CDATA[<p>A notice displays information that explains nearby content. Often used to call attention to a particular detail.</p>

<p>When using Kramdown <code class="language-plaintext highlighter-rouge">{: .notice}</code> can be added after a sentence to assign the <code class="language-plaintext highlighter-rouge">.notice</code> to the <code class="language-plaintext highlighter-rouge">&lt;p&gt;&lt;/p&gt;</code> element.</p>

<p class="notice"><strong>Changes in Service:</strong> We just updated our <a href="#">privacy policy</a> here to better service our customers. We recommend reviewing the changes.</p>

<p class="notice--primary"><strong>Primary Notice:</strong> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. <a href="#">Praesent libero</a>. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet.</p>

<p class="notice--info"><strong>Info Notice:</strong> Lorem ipsum dolor sit amet, <a href="#">consectetur adipiscing elit</a>. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet.</p>

<p class="notice--warning"><strong>Warning Notice:</strong> Lorem ipsum dolor sit amet, consectetur adipiscing elit. <a href="#">Integer nec odio</a>. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet.</p>

<p class="notice--danger"><strong>Danger Notice:</strong> Lorem ipsum dolor sit amet, <a href="#">consectetur adipiscing</a> elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at nibh elementum imperdiet.</p>

<p class="notice--success"><strong>Success Notice:</strong> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer nec odio. Praesent libero. Sed cursus ante dapibus diam. Sed nisi. Nulla quis sem at <a href="#">nibh elementum</a> imperdiet.</p>

<p>Want to wrap several paragraphs or other elements in a notice? Using Liquid to capture the content and then filter it with <code class="language-plaintext highlighter-rouge">markdownify</code> is a good way to go.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% capture notice-2 %}
#### New Site Features

* You can now have cover images on blog pages
* Drafts will now auto-save while writing
{% endcapture %}

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"notice"</span><span class="nt">&gt;</span>{{ notice-2 | markdownify }}<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<div class="notice">
  
<h4 id="new-site-features">New Site Features</h4>

<ul>
  <li>You can now have cover images on blog pages</li>
  <li>Drafts will now auto-save while writing</li>
</ul>

</div>

<p>Or you could skip the capture and stick with straight HTML.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"notice"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;h4&gt;</span>Message<span class="nt">&lt;/h4&gt;</span>
  <span class="nt">&lt;p&gt;</span>A basic message.<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<div class="notice">
  <h4>Message</h4>
  <p>A basic message.</p>
</div>]]></content><author><name>Dan Volovyk</name></author><category term="Blog" /><category term="Post Formats" /><category term="notice" /><summary type="html"><![CDATA[A notice displays information that explains nearby content. Often used to call attention to a particular detail.]]></summary></entry><entry><title type="html">Post: Quote</title><link href="/blog/2010/02/05/post-quote.md" rel="alternate" type="text/html" title="Post: Quote" /><published>2010-02-05T00:00:00+01:00</published><updated>2010-02-05T00:00:00+01:00</updated><id>/blog/2010/02/05/post-quote</id><content type="html" xml:base="/blog/2010/02/05/post-quote.md"><![CDATA[<blockquote>
  <p>Only one thing is impossible for God: To find any sense in any copyright law on the planet.</p>
</blockquote>

<blockquote>
  <p><cite><a href="http://www.brainyquote.com/quotes/quotes/m/marktwain163473.html">Mark Twain</a></cite></p>
</blockquote>]]></content><author><name>Dan Volovyk</name></author><category term="Blog" /><category term="Post Formats" /><category term="quote" /><summary type="html"><![CDATA[Only one thing is impossible for God: To find any sense in any copyright law on the planet. Mark Twain]]></summary></entry><entry><title type="html">Post: Chat</title><link href="/blog/2010/01/08/post-chat.md" rel="alternate" type="text/html" title="Post: Chat" /><published>2010-01-08T00:00:00+01:00</published><updated>2010-01-08T00:00:00+01:00</updated><id>/blog/2010/01/08/post-chat</id><content type="html" xml:base="/blog/2010/01/08/post-chat.md"><![CDATA[<p>Abbott: Strange as it may seem, they give ball players nowadays very peculiar names.</p>

<p>Costello: Funny names?</p>

<p>Abbott: Nicknames, nicknames. Now, on the St. Louis team we have Who’s on first, What’s on second, I Don’t Know is on third–</p>

<p>Costello: That’s what I want to find out. I want you to tell me the names of the fellows on the St. Louis team.</p>

<p>Abbott: I’m telling you. Who’s on first, What’s on second, I Don’t Know is on third–</p>

<p>Costello: You know the fellows’ names?</p>

<p>Abbott: Yes.</p>

<p>Costello: Well, then who’s playing first?</p>

<p>Abbott: Yes.</p>

<p>Costello: I mean the fellow’s name on first base.</p>

<p>Abbott: Who.</p>

<p>Costello: The fellow playin’ first base.</p>

<p>Abbott: Who.</p>

<p>Costello: The guy on first base.</p>

<p>Abbott: Who is on first.</p>

<p>Costello: Well, what are you askin’ me for?</p>

<p>Abbott: I’m not asking you–I’m telling you. Who is on first.</p>

<p>Costello: I’m asking you–who’s on first?</p>

<p>Abbott: That’s the man’s name.</p>

<p>Costello: That’s who’s name?</p>

<p>Abbott: Yes.</p>

<p>Costello: When you pay off the first baseman every month, who gets the money?</p>

<p>Abbott: Every dollar of it. And why not, the man’s entitled to it.</p>

<p>Costello: Who is?</p>

<p>Abbott: Yes.</p>

<p>Costello: So who gets it?</p>

<p>Abbott: Why shouldn’t he? Sometimes his wife comes down and collects it.</p>

<p>Costello: Who’s wife?</p>

<p>Abbott: Yes. After all, the man earns it.</p>

<p>Costello: Who does?</p>

<p>Abbott: Absolutely.</p>

<p>Costello: Well, all I’m trying to find out is what’s the guy’s name on first base?</p>

<p>Abbott: Oh, no, no. What is on second base.</p>

<p>Costello: I’m not asking you who’s on second.</p>

<p>Abbott: Who’s on first!</p>

<p>Costello: St. Louis has a good outfield?</p>

<p>Abbott: Oh, absolutely.</p>

<p>Costello: The left fielder’s name?</p>

<p>Abbott: Why.</p>

<p>Costello: I don’t know, I just thought I’d ask.</p>

<p>Abbott: Well, I just thought I’d tell you.</p>

<p>Costello: Then tell me who’s playing left field?</p>

<p>Abbott: Who’s playing first.</p>

<p>Costello: Stay out of the infield! The left fielder’s name?</p>

<p>Abbott: Why.</p>

<p>Costello: Because.</p>

<p>Abbott: Oh, he’s center field.</p>

<p>Costello: Wait a minute. You got a pitcher on this team?</p>

<p>Abbott: Wouldn’t this be a fine team without a pitcher?</p>

<p>Costello: Tell me the pitcher’s name.</p>

<p>Abbott: Tomorrow.</p>

<p>Costello: Now, when the guy at bat bunts the ball–me being a good catcher–I want to throw the guy out at first base, so I pick up the ball and throw it to who?</p>

<p>Abbott: Now, that’s he first thing you’ve said right.</p>

<p>Costello: I DON’T EVEN KNOW WHAT I’M TALKING ABOUT!</p>

<p>Abbott: Don’t get excited. Take it easy.</p>

<p>Costello: I throw the ball to first base, whoever it is grabs the ball, so the guy runs to second. Who picks up the ball and throws it to what. What throws it to I don’t know. I don’t know throws it back to tomorrow–a triple play.</p>

<p>Abbott: Yeah, it could be.</p>

<p>Costello: Another guy gets up and it’s a long ball to center.</p>

<p>Abbott: Because.</p>

<p>Costello: Why? I don’t know. And I don’t care.</p>

<p>Abbott: What was that?</p>

<p>Costello: I said, I DON’T CARE!</p>

<p>Abbott: Oh, that’s our shortstop!</p>]]></content><author><name>Dan Volovyk</name></author><category term="Blog" /><category term="chat" /><category term="Post Formats" /><summary type="html"><![CDATA[Abbott: Strange as it may seem, they give ball players nowadays very peculiar names.]]></summary></entry></feed>